--1.1
explain (analyze) select max(total_amount) from bookings;
	Finalize Aggregate  (cost=25442.58..25442.59 rows=1 width=32) (actual time=356.192..358.273 rows=1 loops=1)
	   ->  Gather  (cost=25442.36..25442.57 rows=2 width=32) (actual time=353.631..358.262 rows=3 loops=1)
			 Workers Planned: 2
			 Workers Launched: 2
			 ->  Partial Aggregate  (cost=24442.36..24442.37 rows=1 width=32) (actual time=347.811..347.812 rows=1 loops=3)
				   ->  Parallel Seq Scan on bookings  (cost=0.00..22243.29 rows=879629 width=6) (actual time=0.027..132.562 rows=703703 loops=3)
	Time: 358.303 ms
--1.2
explain (analyze) select total_amount from bookings order by total_amount desc limit 1;
	Limit  (cost=27641.46..27641.58 rows=1 width=6) (actual time=483.670..483.961 rows=1 loops=1)
	   ->  Gather Merge  (cost=27641.46..232902.56 rows=1759258 width=6) (actual time=483.667..483.957 rows=1 loops=1)
			 Workers Planned: 2
			 Workers Launched: 2
			 ->  Sort  (cost=26641.44..28840.51 rows=879629 width=6) (actual time=475.163..475.164 rows=1 loops=3)
				   Sort Key: total_amount DESC
				   Sort Method: top-N heapsort  Memory: 25kB
				   Worker 0:  Sort Method: top-N heapsort  Memory: 25kB
				   Worker 1:  Sort Method: top-N heapsort  Memory: 25kB
				   ->  Parallel Seq Scan on bookings  (cost=0.00..22243.29 rows=879629 width=6) (actual time=0.048..238.214 rows=703703 loops=3)
	Time: 483.988 ms

--2
create index test_idx on bookings(total_amount);
	Time: 2865,856 ms
--2.1
explain (analyze) select max(total_amount) from bookings;
	Result  (cost=0.46..0.47 rows=1 width=32) (actual time=0.047..0.048 rows=1 loops=1)
	   InitPlan 1 (returns $0)
		 ->  Limit  (cost=0.43..0.46 rows=1 width=6) (actual time=0.044..0.044 rows=1 loops=1)
			   ->  Index Only Scan Backward using test_idx on bookings  (cost=0.43..60144.86 rows=2111110 width=6) (actual time=0.043..0.043 rows=1 loops=1)
					 Index Cond: (total_amount IS NOT NULL)
					 Heap Fetches: 0
	Time: 0.065 ms
--2.2
explain (analyze) select total_amount from bookings order by total_amount desc limit 1;
	Limit  (cost=0.43..0.46 rows=1 width=6) (actual time=0.017..0.017 rows=1 loops=1)
	   ->  Index Only Scan Backward using test_idx on bookings  (cost=0.43..54867.08 rows=2111110 width=6) (actual time=0.016..0.016 rows=1 loops=1)
			 Heap Fetches: 0
	Time: 0.074 ms
drop index test_idx;

--3
create index test_idx on flights(departure_airport, arrival_airport);
--3.1
explain (analyze) select departure_airport, arrival_airport from flights order by departure_airport, arrival_airport limit 1;
	Limit  (cost=0.29..0.31 rows=1 width=8) (actual time=0.026..0.027 rows=1 loops=1)
	   ->  Index Only Scan using test_idx on flights  (cost=0.29..3975.30 rows=214867 width=8) (actual time=0.025..0.026 rows=1 loops=1)
			 Heap Fetches: 0
	Time: 0.043 ms
--3.2
explain (analyze) select departure_airport, arrival_airport from flights order by departure_airport DESC, arrival_airport DESC limit 1;
	Limit  (cost=0.29..0.31 rows=1 width=8) (actual time=0.027..0.027 rows=1 loops=1)
	   ->  Index Only Scan Backward using test_idx on flights  (cost=0.29..3975.30 rows=214867 width=8) (actual time=0.025..0.025 rows=1 loops=1)
			 Heap Fetches: 0
	Time: 0.042 ms
--3.3
explain (analyze) select departure_airport, arrival_airport from flights order by departure_airport DESC, arrival_airport limit 1;
	Limit  (cost=54.01..54.05 rows=1 width=8) (actual time=0.323..0.323 rows=1 loops=1)
	   ->  Incremental Sort  (cost=54.01..8543.30 rows=214867 width=8) (actual time=0.321..0.321 rows=1 loops=1)
			 Sort Key: departure_airport DESC, arrival_airport
			 Presorted Key: departure_airport
			 Full-sort Groups: 1  Sort Method: top-N heapsort  Average Memory: 25kB  Peak Memory: 25kB
			 Pre-sorted Groups: 1  Sort Method: top-N heapsort  Average Memory: 25kB  Peak Memory: 25kB
			 ->  Index Only Scan Backward using test_idx on flights  (cost=0.29..3975.30 rows=214867 width=8) (actual time=0.069..0.153 rows=1075 loops=1)
				   Heap Fetches: 0
	Execution Time: 0.337 ms
--3.4
explain (analyze) select departure_airport, arrival_airport from flights order by departure_airport, arrival_airport DESC limit 1;
	Limit  (cost=54.01..54.05 rows=1 width=8) (actual time=0.227..0.227 rows=1 loops=1)
	   ->  Incremental Sort  (cost=54.01..8543.30 rows=214867 width=8) (actual time=0.225..0.225 rows=1 loops=1)
			 Sort Key: departure_airport, arrival_airport DESC
			 Presorted Key: departure_airport
			 Full-sort Groups: 1  Sort Method: top-N heapsort  Average Memory: 25kB  Peak Memory: 25kB
			 Pre-sorted Groups: 1  Sort Method: top-N heapsort  Average Memory: 25kB  Peak Memory: 25kB
			 ->  Index Only Scan using test_idx on flights  (cost=0.29..3975.30 rows=214867 width=8) (actual time=0.035..0.088 rows=850 loops=1)
				   Heap Fetches: 0
	Execution Time: 0.250 ms
drop index test_idx;

--4
create unique index tickets_tickets_no_book_ref on tickets(ticket_no) include (book_ref);
	Time: 15385,552 ms (00:15,386)
alter table tickets add constraint tickets_pkey primary key using index tickets_tickets_no_book_ref;
alter table ticket_flights add foreign key (ticket_no) references tickets(ticket_no);
	Time: 11018,310 ms (00:11,018)
commit;
-- Теперь ПК состоит из include-индекса
